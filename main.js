(()=>{"use strict";class t{constructor(t){let e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this.data=t,this.isClass=e,this.element=this.createElement()}createElement(){const t=document.createElement("div");t.setAttribute("data-pin",this.data.pin),t.setAttribute("id",this.data.id),t.classList.add("task-item");let e="checkbox_input";return this.isClass&&(e="checkbox_input checkbox_input_checked"),t.innerHTML=`\n      <label class="checkbox">\n        <input type="text" class="${e}">\n        <div class="checkbox__text" data-text=${this.data.text}>${this.data.text}</div>\n      </label>\n    `,t}}class e{constructor(t,e,s){this.pin=t,this.text=e,this.id=s}}class s{constructor(t){this.elemModal=null,this.eventShowModal=null,this.eventHideModal=null,this.hiding=!1,this.destroyed=!1,this.animationSpeed=200,this.options=t||{},this.createModal(),this.elemModal.addEventListener("click",this.handlerCloseModal.bind(this)),this.eventShowModal=new CustomEvent("show.modalFunc",{detail:this.elemModal}),this.eventHideModal=new CustomEvent("hide.modalFunc",{detail:this.elemModal})}createModal(){this.elemModal=document.createElement("div");let t,e="";if(this.elemModal.classList.add("modalFunc"),t='<div class="modal__backdrop" data-dismiss="modalFunc"><div class="modal__content"><div class="modal__header"><div class="modal__title" data-modalFunc="title">{{title}}</div><span class="modal__btn-close" data-dismiss="modalFunc" title="Закрыть">×</span></div><div class="modal__body" data-modalFunc="content">{{content}}</div>{{footer}}</div></div>'.replace("{{title}}",this.options.title||"Новое окно"),t=t.replace("{{content}}",this.options.content||""),this.options.footerButtons){for(const t of this.options.footerButtons){let s='<button type="button" class="{{button_class}}" data-handler={{button_handler}}>{{button_text}}</button>'.replace("{{button_class}}",t.class);s=s.replace("{{button_handler}}",t.handler),s=s.replace("{{button_text}}",t.text),e+=s}e='<div class="modal__footer">{{buttons}}</div>'.replace("{{buttons}}",e)}t=t.replace("{{footer}}",e),this.elemModal.innerHTML=t,document.body.appendChild(this.elemModal)}show(){this.destroyed||this.hiding||(this.elemModal.classList.add("modal__show"),document.dispatchEvent(this.eventShowModal))}hide(){this.hiding=!0,this.elemModal.classList.remove("modal__show"),this.elemModal.classList.add("modal__hiding"),setTimeout((()=>{this.elemModal.classList.remove("modal__hiding"),this.hiding=!1}),this.animationSpeed),document.dispatchEvent(this.eventHideModal)}handlerCloseModal(t){("modalFunc"===t.target.dataset.dismiss||t.target.dataset.handler)&&this.hide()}destroy(){this.elemModal.parentElement&&this.elemModal.parentElement.removeChild(this.elemModal),this.elemModal.removeEventListener("click",this.handlerCloseModal.bind(this))}setContent(t){this.elemModal.querySelector('[data-modalFunc="content"]').innerHTML=t}setTitle(t){this.elemModal.querySelector('[data-modalFunc="title"]').innerHTML=t}}function i(t){for(;t.children.length>2;)t.lastChild.remove()}console.log("it works!");(new class{constructor(){this.container=null,this.tasks=[],this.pinnedTasksEl=[],this.allTasksEl=[],this.isModal=!1,this.initModalListener()}bindToDOM(t){if(!(t instanceof HTMLElement))throw new Error("container is not HTMLElement");this.container=t,this.drawUi()}checkBinding(){if(null===this.container)throw new Error("Tracker not bind to DOM")}drawUi(){this.checkBinding(),this.render(),this.pinnedTasksEl=this.container.querySelector(".tasks-pinned"),this.allTasksEl=this.container.querySelector(".tasks-all"),this.pinnedNoTaskEl=this.pinnedTasksEl.querySelector(".no-tasks"),this.noAllTasksEl=this.allTasksEl.querySelector(".no-tasks"),this.events()}render(){this.container.insertAdjacentHTML("beforeend",'\n      <div class="tasks-wrapper">\n        <div class="tasks-board">\n          <div class="task-form">\n            <form>\n              <label class="task-title task-title_label" for="enter-text">TOP Tasks</label>\n              <input class="task-form__input" data-id="enter-text" type="text" name="enter-text" placeholder="Enter your text here">\n            </form>\n        </div>\n        <div class="tasks-pinned">\n          <div class="tasks-title">Pinned:</div>\n          <div class="no-tasks">No pinned tasks</div>\n        </div>\n        <div class="tasks-all">\n          <div class="tasks-title">All Tasks:</div>\n          <div class="no-tasks">No tasks found</div>\n        </div>\n      </div>\n    </div>\n    ')}events(){const t=document.querySelector("[data-id='enter-text']");this.container.querySelector("form").addEventListener("submit",(t=>this.onSubmit(t))),this.container.addEventListener("click",(t=>this.onClick(t))),t.addEventListener("input",(()=>this.onInput(t)))}initModalListener(){document.addEventListener("click",(t=>{"modalHandlerCancel"===t.target.dataset.handler&&this.currentModal&&(this.currentModal.hide(),this.isModal=!1)}))}createTask(t){const s=new e("no",t,Date.now());return this.tasks.push(s),s}onClick(t){if("text"===t.target.type){if(t.target.closest(".tasks-all"))return void this.redraw(t,"yes",this.pinnedTasksEl,this.pinnedNoTaskEl,!0);t.target.closest(".tasks-pinned")&&this.redraw(t,"no",this.allTasksEl)}}onSubmit(t){t.preventDefault();const{value:e}=t.currentTarget.querySelector("[data-id='enter-text']");e?(this.createTask(e),this.noAllTasksEl.classList.add("inactive"),this.showAllTasks("no"),t.currentTarget.querySelector("[data-id='enter-text']").value=""):this.showModalMessage("Write text!","✍")}onInput(e){i(this.allTasksEl);const s=(a=this.sort(),n=e.value,a.filter((t=>function(t,e){const s=e.trim().toLowerCase();return t.toLowerCase().includes(s)}(t.text,n))));var a,n;0===s.length?this.noAllTasksEl.classList.remove("inactive"):this.noAllTasksEl.classList.add("inactive"),s.forEach((e=>{const s=new t(e);this.allTasksEl.appendChild(s.element)}))}showAllTasks(e){const s={no:{array:this.allTasksEl,activeEl:this.pinnedNoTaskEl,inactiveEl:this.noAllTasksEl,isClass:!1},yes:{array:this.pinnedTasksEl,activeEl:this.noAllTasksEl,inactiveEl:this.pinnedNoTaskEl,isClass:!0}},{array:i,activeEl:a,inactiveEl:n,isClass:l}=s[e],o=this.sort(e);0!==o.length&&n.classList.add("inactive"),o.length===this.tasks.length&&a.classList.remove("inactive"),o.forEach((e=>{const s=new t(e,l);i.appendChild(s.element)}))}redraw(t,e,s){const a=t.target.closest(".task-item"),n=this.tasks.find((t=>t.id===+a.id));n&&(n.pin=e),a.remove(),i(s),this.showAllTasks(e)}sort(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"no";return this.tasks.filter((e=>e.pin===t))}showModalMessage(t,e){this.isModal||(this.isModal=!0,this.showModal(t,e))}showModal(t,e){this.currentModal=new s({title:t,content:e,footerButtons:[{class:"btn btn__cancel",text:"Close",handler:"modalHandlerCancel"}]}),this.currentModal.show()}}).bindToDOM(document.querySelector(".tasks-container"))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,